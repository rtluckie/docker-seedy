#!/usr/bin/env python3

import argparse
import grp
import logging
import os
import pathlib
import pwd
import shutil
import subprocess


def setup_logging(logger_name='provision_user', default_log_level='INFO', file_log_level='DEBUG'):
    logger = logging.getLogger(logger_name)
    logger.setLevel(default_log_level)
    formatter = logging.Formatter(fmt='%(asctime)s:%(msecs)-4d %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s', datefmt='%Y.%m.%d %H:%M:%S')
    file_handler = logging.FileHandler('/tmp/{}.log'.format(logger_name))
    file_handler.setLevel(file_log_level)
    file_handler.setFormatter(formatter)
    console_handler = logging.StreamHandler()
    console_handler.setLevel(default_log_level)
    console_handler.setFormatter(formatter)

    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    return logger


def cli():
    parser = argparse.ArgumentParser(description='Provision user.')
    parser.add_argument('--username', dest='USERNAME', type=str, help='Username to provision')
    parser.add_argument('--uid', dest='UID', type=str, default='1000', help="The numerical value of the user's ID. This value must be unique")
    parser.add_argument('--groups', dest='GROUPS', type=str, default='users,docker', help="comma seperated list of supplementary groups of the new account")
    parser.add_argument('--shell', dest='SHELL', type=str, default='bash', help='Shell to use')
    parser.add_argument('--dotfiles', '-d', dest='DOTFILES', type=str, help='Dotfiles to use.')
    parser.add_argument("-v", "--verbose", dest='VERBOSE', action="store_true")
    args = parser.parse_args()
    return parser, args


def read_config(fpath=None):
    if not os.path.isfile(fpath):
        log.error('Failed to read file [%s]', fpath)
        raise FileExistsError('Failed to read file [%s]', fpath)
    with open(fpath) as fin:
        data = {}
        for line in fin:
            if '=' in line:
                k, v = line.rstrip().split("=")
                data[k] = v.lstrip('"').rstrip('"')
    return data


def run_command(cmd=None):
    if type(cmd) == str:
        cmd_str = cmd
        cmd = cmd.split()
    else:
        cmd_str = ' '.join(cmd)
    log.debug('Running command [%s]', cmd_str)
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    while True:
        stdout = process.stdout.readline().strip().decode("utf-8")
        stderr = process.stderr.readline().strip().decode("utf-8")
        if (stdout == '' and stderr == '') and process.poll() is not None:
            break
        if stdout:
            log.debug(stdout)
        if stderr:
            log.debug(stderr)
    rc = process.poll()
    return rc


def provision_user(username=None, uid=None, groups=None, shell=None):
    if not shutil.which('sudo'):
        raise ValueError("sudo must be installed")

    shell_path = shutil.which(shell)
    if not shell_path:
        log.fatal('Shell [%s] not found', shell)

    def get_sudo_group(all_groups=None):
        for group in all_groups:
            if group == 'sudo':
                return 'sudo'
            elif group == 'wheel':
                return 'wheel'
        raise ValueError("No sudo group found")

    def set_no_password_for_sudoers(fpath='/etc/sudoers', sudo_group=None):
        log.debug('Setting no password for sudoers...')
        if not os.path.isfile(fpath):
            raise FileExistsError('/etc/sudoers does not exist')
        sudo_line = '%{sudo_group}\tALL=(ALL:ALL) NOPASSWD:ALL\n'
        sudo_line = sudo_line.format(sudo_group=sudo_group)
        with open(fpath, 'r') as fread:
            for line in fread:
                if line == sudo_line:
                    log.debug('sudo line already exists')
                    return
        log.debug('Add sudo line...')
        with open(fpath, 'a') as fa:
            fa.write('\n')
            fa.write(sudo_line)
            return

    def create_user(username=None, groups=None, shell=None):
        cmd = 'useradd --create-home --user-group --groups {groups} --shell {shell} --uid {uid} {username}'
        cmd = cmd.format(username=username, uid=uid, groups=groups, shell=shell)
        proc = run_command(cmd)
        return proc

    all_user_names = [user[0] for user in pwd.getpwall()]
    all_group_names = [group[0] for group in grp.getgrall()]

    sudo_group = get_sudo_group(all_groups=all_group_names)

    groups = [sudo_group] + groups.split(',')

    target_groups = []
    for group in groups:
        if group not in all_group_names:
            log.warning('Group [%s] not found', group)
        else:
            target_groups.append(group)

    groups = ','.join(target_groups)

    if username not in all_user_names:
        create_user(username=username, groups=groups, shell=shell_path)
    else:
        log.debug('User [%s] already exists', username)

    set_no_password_for_sudoers(sudo_group=sudo_group)


def provision_ssh(user=None):
    def fix_owner_and_perms(dpath=None, user=None):
        user_query = pwd.getpwnam(user)
        _uid = user_query.pw_uid
        _gid = user_query.pw_gid
        for root, dirs, files in os.walk(dpath):
            for i in dirs:
                target = os.path.join(root, i)
                os.chown(target, uid=_uid, gid=_gid)
                os.chmod(path=target, mode=0o700)
            for i in files:
                target = os.path.join(root, i)
                os.chown(target, uid=_uid, gid=_gid)
                os.chmod(path=target, mode=0o600)

    def append_authorized_keys(authorized_keys_fpath=None, public_key_fpath=None):
        if not public_key_fpath:
            public_key_fpath = '/tmp/id_rsa.pub'
        log.debug('Append public key to authorized keys...')
        if not os.path.isfile(authorized_keys_fpath):
            pathlib.Path(authorized_keys_fpath).touch()
        if not os.path.isfile(public_key_fpath):
            raise FileExistsError('Public key does not exist [%s]', public_key_fpath)
        public_key_data = open(public_key_fpath).read()
        with open(authorized_keys_fpath, 'r') as f:
            for line in f:
                if line == public_key_data:
                    log.debug('Public key already in authorized keys')
                    return True
        log.debug('Adding public key to authorized keys...')
        with open(authorized_keys_fpath, 'a') as f:
            f.write('\n')
            f.write(public_key_data)
            return True

    home = pwd.getpwnam(user).pw_dir
    dpath = os.path.join(home, '.ssh')
    if not os.path.isdir(dpath):
        os.makedirs(name=dpath, mode=0o700)
    authorized_keys_fpath = os.path.join(dpath, 'authorized_keys')
    append_authorized_keys(authorized_keys_fpath=authorized_keys_fpath)
    fix_owner_and_perms(dpath=dpath, user=user)


def provision_yadm(user=None, dotfiles=None, shell=None):
    log.info('YADM Provision')
    base_cmd = ['su', '--login', '--shell', shell, user, '-c']
    cmd = base_cmd.copy()
    extra_cmd = 'source /etc/profile && yadm clone --no-bootstrap {dotfiles}'.format(dotfiles=dotfiles)
    cmd.append(extra_cmd)
    rc = run_command(cmd=cmd)
    if rc != 0:
        log.error('Issue with yadm provision')

    cmd = base_cmd.copy()
    extra_cmd = '/home/{user}/.config/yadm/bootstrap'.format(user=user)
    cmd.append(extra_cmd)

    rc = run_command(cmd=cmd)
    if rc != 0:
        log.error('Issue with yadm provision')


def fix_home_ownership(user=None):
    dpath = os.path.join('/home', user)
    if not os.path.isdir(dpath):
        raise ValueError('No directory found at %s', dpath)
    cmd = 'chown {user}:{user} {dpath}'.format(user=user, dpath=dpath)
    rc = run_command(cmd)

    dnames = ['.config', '.cache', '.local']
    for dname in dnames:
        dpath = os.path.join('/home', user, dname)
        if os.path.isdir(dpath):
            cmd = 'chown -R {user}:{user} {dpath}'.format(user=user, dpath=dpath)
            rc = run_command(cmd)
            if rc != 0:
                log.error("error running command [%s]", cmd)


def fix_go_ownership(user=None):
    log.debug('Fix go ownership')
    dpath = '/go'
    if not os.path.isdir(dpath):
        log.debug('No dpath found [%s]', dpath)
        return True
    cmd = 'chown -R {user}:{user} {dpath}'.format(user=user, dpath=dpath)
    exit_code = run_command(cmd)
    print(exit_code)


if __name__ == '__main__':
    parser, args = cli()
    if args.VERBOSE:
        log = setup_logging(default_log_level='DEBUG')
    else:
        log = setup_logging()
    shell_path = shutil.which(args.SHELL)
    if not shell_path:
        log.fatal('Shell [%s] not found', args.SHELL)
    provision_user(username=args.USERNAME, uid=args.UID, groups=args.GROUPS, shell=args.SHELL)
    provision_ssh(user=args.USERNAME)
    fix_home_ownership(user=args.USERNAME)
    fix_go_ownership(user=args.USERNAME)
    provision_yadm(user=args.USERNAME, dotfiles=args.DOTFILES, shell=shell_path)
